import { c as create_ssr_component, e as escape, d as compute_rest_props, f as createEventDispatcher, a as add_attribute, i as spread, j as escape_object, b as compute_slots, v as validate_component } from '../../../chunks/index.js';
import '../../../chunks/ProgressBar.svelte_svelte_type_style_lang.js';

/* C:/Users/Schmi/Projects/lumisxh_master/node_modules/.pnpm/@skeletonlabs+skeleton@0.80.8/node_modules/@skeletonlabs/skeleton/components/Divider/Divider.svelte generated by Svelte v3.55.0 */

const Divider = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let classesOrientation;
	let classesDivider;
	let { vertical = false } = $$props;
	let { borderWidth = 'border-t' } = $$props;
	let { borderStyle = 'border-solid' } = $$props;
	let { borderColor = 'border-surface-300-600-token' } = $$props;
	let { margin = 'm-0' } = $$props;
	let { opacity = 'opacity-full' } = $$props;

	// Base Classes
	const cBaseDivider = `block`;

	if ($$props.vertical === void 0 && $$bindings.vertical && vertical !== void 0) $$bindings.vertical(vertical);
	if ($$props.borderWidth === void 0 && $$bindings.borderWidth && borderWidth !== void 0) $$bindings.borderWidth(borderWidth);
	if ($$props.borderStyle === void 0 && $$bindings.borderStyle && borderStyle !== void 0) $$bindings.borderStyle(borderStyle);
	if ($$props.borderColor === void 0 && $$bindings.borderColor && borderColor !== void 0) $$bindings.borderColor(borderColor);
	if ($$props.margin === void 0 && $$bindings.margin && margin !== void 0) $$bindings.margin(margin);
	if ($$props.opacity === void 0 && $$bindings.opacity && opacity !== void 0) $$bindings.opacity(opacity);

	classesOrientation = vertical === true
	? 'w-0 h-full min-h-[24px]'
	: 'w-full h-0';

	classesDivider = `${cBaseDivider} ${classesOrientation} ${borderWidth} ${borderStyle} ${borderColor} ${margin} ${opacity} ${$$props.class ?? ''}`;
	return `<hr class="${"divider " + escape(classesDivider, true)}" data-testid="${"divider"}">`;
});

/* C:/Users/Schmi/Projects/lumisxh_master/node_modules/.pnpm/@skeletonlabs+skeleton@0.80.8/node_modules/@skeletonlabs/skeleton/components/SlideToggle/SlideToggle.svelte generated by Svelte v3.55.0 */
const cBase = 'inline-block';
const cLabel = 'flex items-center';
const cTrack = 'flex transition-all duration-[200ms]';
const cThumb = 'w-[50%] h-full scale-[0.7] cursor-pointer transition-all duration-[200ms] shadow-lg';

const SlideToggle = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let cTrackAccent;
	let cThumbBackground;
	let cThumbPos;
	let classesDisabled;
	let classesBase;
	let classesLabel;
	let classesTrack;
	let classesThumb;
	let $$restProps = compute_rest_props($$props, ["checked","size","accent","borderWidth","borderColor","rounded","label"]);
	let $$slots = compute_slots(slots);

	// Event Handler
	createEventDispatcher();

	let { checked = false } = $$props;
	let { size = 'md' } = $$props;
	let { accent = 'bg-accent-500' } = $$props;
	let { borderWidth = 'border-token' } = $$props;
	let { borderColor = 'border-surface-300-600-token' } = $$props;
	let { rounded = 'rounded-full' } = $$props;
	let { label = '' } = $$props;

	// Set track size
	let trackSize;

	// prettier-ignore
	switch (size) {
		case 'sm':
			trackSize = 'w-12 h-6';
			break;
		case 'lg':
			trackSize = 'w-20 h-10';
			break;
		default:
			trackSize = 'w-16 h-8';
	}

	// Prune $$restProps to avoid overwriting $$props.class
	function prunedRestProps() {
		delete $$restProps.class;
		return $$restProps;
	}

	if ($$props.checked === void 0 && $$bindings.checked && checked !== void 0) $$bindings.checked(checked);
	if ($$props.size === void 0 && $$bindings.size && size !== void 0) $$bindings.size(size);
	if ($$props.accent === void 0 && $$bindings.accent && accent !== void 0) $$bindings.accent(accent);
	if ($$props.borderWidth === void 0 && $$bindings.borderWidth && borderWidth !== void 0) $$bindings.borderWidth(borderWidth);
	if ($$props.borderColor === void 0 && $$bindings.borderColor && borderColor !== void 0) $$bindings.borderColor(borderColor);
	if ($$props.rounded === void 0 && $$bindings.rounded && rounded !== void 0) $$bindings.rounded(rounded);
	if ($$props.label === void 0 && $$bindings.label && label !== void 0) $$bindings.label(label);

	cTrackAccent = checked
	? accent
	: 'bg-surface-200-700-token cursor-pointer';

	cThumbBackground = checked ? 'bg-white' : 'bg-white/50';
	cThumbPos = checked ? 'translate-x-full' : '';

	classesDisabled = $$props.disabled === true
	? 'opacity-50'
	: 'hover:brightness-[105%] dark:hover:brightness-110 cursor-pointer';

	classesBase = `${cBase} ${classesDisabled}`;
	classesLabel = `${cLabel} ${$$props.class ?? ''}`;
	classesTrack = `${cTrack} ${borderWidth} ${borderColor} ${rounded} ${trackSize} ${cTrackAccent}`;
	classesThumb = `${cThumb} ${rounded} ${cThumbBackground} ${cThumbPos}`;

	return `<div${add_attribute("id", label, 0)} class="${"slide-toggle " + escape(classesBase, true)}" data-testid="${"slide-toggle"}" role="${"switch"}"${add_attribute("aria-label", label, 0)}${add_attribute("aria-checked", checked, 0)} tabindex="${"0"}"><label class="${"slide-toggle-label " + escape(classesLabel, true)}">
		<input${spread(
		[
			{ type: "checkbox" },
			{ class: "slide-toggle-input hidden" },
			escape_object(prunedRestProps()),
			{ disabled: $$props.disabled || null }
		],
		{}
	)}${add_attribute("checked", checked, 1)}>
		
		<div class="${[
		"slide-toggle-track " + escape(classesTrack, true),
		$$props.disabled ? "cursor-not-allowed" : ""
	].join(' ').trim()}"><div class="${[
		"slide-toggle-thumb " + escape(classesThumb, true),
		$$props.disabled ? "cursor-not-allowed" : ""
	].join(' ').trim()}"></div></div>
		
		${$$slots.default
	? `<div class="${"slide-toggle-text ml-3"}">${slots.default ? slots.default({}) : ``}</div>`
	: ``}</label></div>`;
});

var ErrorCode;
(function (ErrorCode) {
    ErrorCode[ErrorCode["InvalidFileType"] = 0] = "InvalidFileType";
    ErrorCode[ErrorCode["FileSizeMaximumExceeded"] = 1] = "FileSizeMaximumExceeded";
    ErrorCode[ErrorCode["FileSizeMinimumNotMet"] = 2] = "FileSizeMinimumNotMet";
    ErrorCode[ErrorCode["FileCountExceeded"] = 3] = "FileCountExceeded";
})(ErrorCode || (ErrorCode = {}));
({
    [ErrorCode.InvalidFileType]: "invalid file type",
    [ErrorCode.FileCountExceeded]: "file count exceeded",
    [ErrorCode.FileSizeMinimumNotMet]: "min file size not met",
    [ErrorCode.FileSizeMaximumExceeded]: "max file size exceeded",
});

const FileDrop_svelte_svelte_type_style_lang = '';

/* src/routes/emulator/+page.svelte generated by Svelte v3.55.0 */

const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let emu;
	let running = false;

	let innerWidth;
	let scale = 30;

	if (scale % 2 !== 0) {
		scale += 1;
	}

	let canv;
	let colorOn = "white";
	let colorOff = "black";

	let audio;

	function gameLoop() {
		if (!running) return;
		let output = emu.tick();

		if (!output.success) {
			running = false;
			alert("Something went wrong processing the latest opcode. \nDEBUG: The faulty opcode is '" + output.opcode.toString(16) + "'");
		}

		if (emu.should_beep()) {
			audio.play();
		}

		const ctx = canv.getContext("2d");

		for (let y = 0; y < 32; y++) {
			for (let x = 0; x < 64; x++) {
				ctx.beginPath();
				ctx.rect(x * scale, y * scale, x + scale, y + scale);

				if (emu.display.get_pixel(y, x)) {
					ctx.fillStyle = colorOn;
				} else {
					ctx.fillStyle = colorOff;
				}

				ctx.fill();
			}
		}

		if (running) window.requestAnimationFrame(gameLoop);
	}

	let $$settled;
	let $$rendered;

	do {
		$$settled = true;
		scale = Math.abs(Math.ceil(innerWidth / 70));

		{
			if (running) {
				gameLoop();
			}
		}

		$$rendered = `


<main class="${"h-full w-full p-5 flex flex-col items-center content-center justify-center text-center"}"><audio src="${"https://www.soundjay.com/buttons/beep-02.mp3"}"${add_attribute("this", audio, 0)}></audio>
	<div class="${"flex flex-col items-center content-center justify-center text-center mb-3"}"><canvas${add_attribute("width", 64 * scale, 0)}${add_attribute("height", 32 * scale, 0)}${add_attribute("this", canv, 0)}></canvas></div>
	${validate_component(Divider, "Divider").$$render($$result, {}, {}, {})}
	<div class="${"flex flex-col items-center content-center justify-center text-center min-h-6rem mt-3"}"><h1 class="${"mb-2"}">Settings</h1>
		<div class="${"grid grid-cols-2 justify-around"}"><div class="${[
			"flex flex-col items-center m-2 content-center justify-center text-center w-3/4 border-dashed border-2 border-accent-500 rounded-[8px]",
			(running ? "border-surface-800" : "") + ' ' + (running ? "cursor-no-drop" : "")
		].join(' ').trim()}">Upload a ROM to play
			</div>
				<label for="${"colorON"}" class="${"m-2"}">${escape(running ? 'Resetting' : 'Starting')} the emulator (Or press \`Escape\` for the same action)
					${validate_component(SlideToggle, "SlideToggle").$$render(
			$$result,
			{ checked: running },
			{
				checked: $$value => {
					running = $$value;
					$$settled = false;
				}
			},
			{}
		)}</label>
				<label for="${"colorON"}" class="${"m-2"}">Set a color for active pixels
					<input id="${"colorON"}" ${running ? "disabled" : ""} class="${"bg-surface-200 border-[2px] dark:border-none border-surface-800 dark:bg-surface-800 p-1 rounded-[8px] focus:outline-none focus:outline-accent-500"}"${add_attribute("value", colorOn, 0)}></label>
				<label for="${"colorOFF"}" class="${"m-2"}">Set a color for inactive pixels
					<input id="${"colorOFF"}" ${running ? "disabled" : ""} class="${"bg-surface-200 border-[2px] dark:border-none border-surface-800 dark:bg-surface-800 p-1 rounded-[8px] focus:outline-none focus:outline-accent-500"}"${add_attribute("value", colorOff, 0)}></label></div></div></main>`;
	} while (!$$settled);

	return $$rendered;
});

export { Page as default };
